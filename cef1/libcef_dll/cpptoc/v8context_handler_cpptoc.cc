// Copyright (c) 2013 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/v8context_handler_cpptoc.h"
#include "libcef_dll/ctocpp/browser_ctocpp.h"
#include "libcef_dll/ctocpp/frame_ctocpp.h"
#include "libcef_dll/ctocpp/v8context_ctocpp.h"
#include "libcef_dll/ctocpp/v8exception_ctocpp.h"
#include "libcef_dll/ctocpp/v8stack_trace_ctocpp.h"


// MEMBER FUNCTIONS - Body may be edited by hand.

void CEF_CALLBACK v8context_handler_on_context_created(
    struct _cef_v8context_handler_t* self, cef_browser_t* browser,
    cef_frame_t* frame, cef_v8context_t* context) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser)
    return;
  // Verify param: frame; type: refptr_diff
  DCHECK(frame);
  if (!frame)
    return;
  // Verify param: context; type: refptr_diff
  DCHECK(context);
  if (!context)
    return;

  // Execute
  CefV8ContextHandlerCppToC::Get(self)->OnContextCreated(
      CefBrowserCToCpp::Wrap(browser),
      CefFrameCToCpp::Wrap(frame),
      CefV8ContextCToCpp::Wrap(context));
}

void CEF_CALLBACK v8context_handler_on_context_released(
    struct _cef_v8context_handler_t* self, cef_browser_t* browser,
    cef_frame_t* frame, cef_v8context_t* context) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser)
    return;
  // Verify param: frame; type: refptr_diff
  DCHECK(frame);
  if (!frame)
    return;
  // Verify param: context; type: refptr_diff
  DCHECK(context);
  if (!context)
    return;

  // Execute
  CefV8ContextHandlerCppToC::Get(self)->OnContextReleased(
      CefBrowserCToCpp::Wrap(browser),
      CefFrameCToCpp::Wrap(frame),
      CefV8ContextCToCpp::Wrap(context));
}

void CEF_CALLBACK v8context_handler_on_uncaught_exception(
    struct _cef_v8context_handler_t* self, cef_browser_t* browser,
    cef_frame_t* frame, cef_v8context_t* context, cef_v8exception_t* exception,
    cef_v8stack_trace_t* stackTrace) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  DCHECK(self);
  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  DCHECK(browser);
  if (!browser)
    return;
  // Verify param: frame; type: refptr_diff
  DCHECK(frame);
  if (!frame)
    return;
  // Verify param: context; type: refptr_diff
  DCHECK(context);
  if (!context)
    return;
  // Verify param: exception; type: refptr_diff
  DCHECK(exception);
  if (!exception)
    return;
  // Verify param: stackTrace; type: refptr_diff
  DCHECK(stackTrace);
  if (!stackTrace)
    return;

  // Execute
  CefV8ContextHandlerCppToC::Get(self)->OnUncaughtException(
      CefBrowserCToCpp::Wrap(browser),
      CefFrameCToCpp::Wrap(frame),
      CefV8ContextCToCpp::Wrap(context),
      CefV8ExceptionCToCpp::Wrap(exception),
      CefV8StackTraceCToCpp::Wrap(stackTrace));
}


// CONSTRUCTOR - Do not edit by hand.

CefV8ContextHandlerCppToC::CefV8ContextHandlerCppToC(CefV8ContextHandler* cls)
    : CefCppToC<CefV8ContextHandlerCppToC, CefV8ContextHandler,
        cef_v8context_handler_t>(cls) {
  struct_.struct_.on_context_created = v8context_handler_on_context_created;
  struct_.struct_.on_context_released = v8context_handler_on_context_released;
  struct_.struct_.on_uncaught_exception =
      v8context_handler_on_uncaught_exception;
}

#ifndef NDEBUG
template<> long CefCppToC<CefV8ContextHandlerCppToC, CefV8ContextHandler,
    cef_v8context_handler_t>::DebugObjCt = 0;
#endif

